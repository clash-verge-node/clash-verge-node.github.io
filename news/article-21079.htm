<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://clash-verge-node.github.io/news/article-21079.htm" />
    <meta charset="utf-8">
    <title>C++编程——C++对象模型和this指针</title>
        <meta name="description" content="文章目录  1. C++对象模型 2. this指针    C++中类对象的成员变量和成员函数是分开存储的  非静态成员变量，属于类的对象上 静态成员变量，不属于类的对象上 非静态成员函数，不属于类的" />
        <link rel="icon" href="/assets/website/img/clash_verge_node/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="Clash Verge Node免费机场节点分享官网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://clash-verge-node.github.io/news/article-21079.htm" />
    <meta property="og:site_name" content="Clash Verge Node免费机场节点分享官网" />
    <meta property="og:title" content="C++编程——C++对象模型和this指针" />
    <meta property="og:image" content="https://clash-verge-node.github.io/uploads/20240912-1/d25f5bb46cd22a92d23ea2f76be051c7.webp" />
        <meta property="og:release_date" content="2024-12-04T08:42:29" />
    <meta property="og:updated_time" content="2024-12-04T08:42:29" />
        <meta property="og:description" content="文章目录  1. C++对象模型 2. this指针    C++中类对象的成员变量和成员函数是分开存储的  非静态成员变量，属于类的对象上 静态成员变量，不属于类的对象上 非静态成员函数，不属于类的" />
        
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="C++编程——C++对象模型和this指针">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">
    
    <!-- Pe-7 icon -->
    <link href="/assets/website/css/clash_verge_node/pe-icon-7.css" rel="stylesheet" type="text/css">
    <!--Slider-->
    <link rel="stylesheet" href="/assets/website/css/clash_verge_node/owl.carousel.min.css">
    <link rel="stylesheet" href="/assets/website/css/clash_verge_node/owl.theme.default.min.css">
    <!-- css -->
    <link href="/assets/website/css/clash_verge_node/bootstrap.min.css" rel="stylesheet" type="text/css">
    <link href="/assets/website/css/clash_verge_node/style.min.css" rel="stylesheet" type="text/css">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-1V24PEL91J"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-1V24PEL91J');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <!-- Loader -->
    <div id="preloader">
        <div id="status">
            <div class="spinner">
                <div class="bounce1"></div>
                <div class="bounce2"></div>
                <div class="bounce3"></div>
            </div>
        </div>
    </div>
    <!--Navbar Start-->
    <nav class="navbar navbar-expand-lg fixed-top navbar-custom sticky sticky-dark align-items-center">
        <div class="container">
                        <a class="logo mr-3" href="/">
                <span>Clash Verge Node</span>
            </a>
                        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarCollapse" aria-controls="navbarCollapse" aria-expanded="false" aria-label="Toggle navigation"><i class="" data-feather="menu"></i></button>
            <div class="collapse navbar-collapse" id="navbarCollapse">
                <ul class="navbar-nav navbar-center" id="mySidenav">
                                        <li class="nav-item"><a href="/" class="nav-link">首页</a></li>
                                        <li class="nav-item"><a href="/free-nodes/" class="nav-link">免费节点</a></li>
                                        <li class="nav-item"><a href="/paid-subscribe/" class="nav-link">推荐机场</a></li>
                                        <li class="nav-item"><a href="/news/" class="nav-link">新闻资讯</a></li>
                                        <li class="nav-item"><a href="#" class="nav-link">关于</a></li>
                    <li class="nav-item"><a href="#" class="nav-link">联系</a></li>
                </ul>
            </div>
        </div>
    </nav>
    <!-- Navbar End -->
    <!-- Hero Start -->
    <section class="hero-1-bg bg-light" style="background-image: url(/assets/website/img/clash_verge_node/hero-1-bg-img.png);padding: 0;" id="home">
        <div class="container">
            <div class="row align-items-center justify-content-center">
                <div class="col-lg-6">
                    <h1 class="hero-1-title font-weight-normal text-dark mb-4">C++编程——C++对象模型和this指针</h1>
                    <p class="text-muted mb-4 pb-3">
                        <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / 正文
                    </p>
                </div>
                <div class="col-lg-6 col-md-10">
                    <div class="mt-lg-0"><img src="/assets/website/img/clash_verge_node/hero-img.png" alt="" class="img-fluid d-block mx-auto"></div>
                </div>
            </div>
        </div>
    </section>
    <!-- Hero End -->
    <!-- Features Start -->
    <section class="section" id="features">
        <div class="container">
            <div class="features-content">
                <div class="row">
                    <div class="col-md-9">
                                        <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> <div class="toc"> <h3>文章目录</h3> <ul> <li><a href="#1_C_1" rel="nofollow">1. C++对象模型</a></li> <li><a href="#2_this_96" rel="nofollow">2. this指针</a></li> </ul> </div> </h1> <p>C++中类对象的成员变量和成员函数是分开存储的</p> <ul> <li>非静态成员变量，属于类的对象上</li> <li>静态成员变量，不属于类的对象上</li> <li>非静态成员函数，不属于类的对象上</li> <li>静态成员函数，不属于类的对象上</li> </ul> <p><mark>即只有非静态成员变量才属于类的对象上</mark></p> <p><strong>示例1</strong>：(空类的对象模型)</p> <pre><code class="prism language-cpp"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{<!-- --></span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 	Person p<span class="token punctuation">;</span>  	<span class="token comment">//空对象占用的内存空间为1</span> 	<span class="token comment">//C++编译器会给每个空对象也分配一个字节空间，是为了区分空对象占内存的位置</span> 	<span class="token comment">//每个空对象也应该有一个独一无二的内存地址</span> 	cout <span class="token operator">&lt;&lt;</span> <span class="token string">"size of p = "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">}</span> </code></pre> <p><strong>示例2</strong>：(只含int类型静态成员变量)</p> <pre><code class="prism language-cpp"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{<!-- --></span> 	<span class="token keyword">int</span> m_A<span class="token punctuation">;</span> <span class="token comment">//非静态成员变量 属于类的对象上</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 	Person p<span class="token punctuation">;</span> 	<span class="token comment">// 含有int m_A后，类对象所占用的大小为4</span> 	cout <span class="token operator">&lt;&lt;</span> <span class="token string">"size of p = "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">}</span> </code></pre> <p><strong>示例3</strong>：(含int类型静态成员变量和int类型非静态成员变量)</p> <pre><code class="prism language-cpp"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{<!-- --></span> 	<span class="token keyword">int</span> m_A<span class="token punctuation">;</span> <span class="token comment">//非静态成员变量 属于类的对象上</span> 	<span class="token keyword">static</span> <span class="token keyword">int</span> m_B<span class="token punctuation">;</span> <span class="token comment">//静态成员变量， 不属于类的对象上</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> Person<span class="token operator">::</span>m_B <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//静态成员变量类内声明，类外初始化</span>   <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 	Person p<span class="token punctuation">;</span> 	<span class="token comment">// 含有int m_A和static int m_B后，类对象所占用的大小同样为4</span> 	cout <span class="token operator">&lt;&lt;</span> <span class="token string">"size of p = "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">}</span> </code></pre> <p><strong>示例4</strong>：（含int类型静态成与非静态成员变量，同时含有静态与非静态成员函数）</p> <pre><code class="prism language-cpp"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{<!-- --></span> <span class="token keyword">public</span><span class="token operator">:</span> 	<span class="token keyword">int</span> m_A<span class="token punctuation">;</span> <span class="token comment">//非静态成员变量 属于类的对象上</span> 	<span class="token keyword">static</span> <span class="token keyword">int</span> m_B<span class="token punctuation">;</span> <span class="token comment">//静态成员变量， 不属于类的对象上</span>  	<span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//非静态成员函数，不属于类的对象上</span> 	<span class="token punctuation">{<!-- --></span>  	<span class="token punctuation">}</span>  	<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//静态成员函数，不属于类的对象上</span> 	<span class="token punctuation">{<!-- --></span>  	<span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> Person<span class="token operator">::</span>m_B <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//静态成员变量类内声明，类外初始化</span>   <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 	Person p<span class="token punctuation">;</span> 	<span class="token comment">// 类对象所占用的大小为4</span> 	cout <span class="token operator">&lt;&lt;</span> <span class="token string">"size of p = "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">}</span> </code></pre> </h1> <p>通过C++对象模型可知，静态与非静态成员函数都不属于类的对象，即每一个成员函数只会生成一份函数实例，类的不同对象共享这一份函数实例。<br /> 那么就面临着一个问题：既然类的所有对象都共享同一份函数实例，那代码如何区分是哪个对象在调用成员函数呢？<br /> 这就引出了this指针的概念，C++通过提供特殊的对象指针，即this指针，解决上述问题。<mark><strong>this指针指向被调用成员函数所属的对象</strong></mark></p> <p>this指针的两大用途：</p> <ul> <li>当形参和成员变量同名时，可用this指针区分,以解决名称冲突</li> </ul> <p><strong>示例：</strong></p> <pre><code class="prism language-cpp"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{<!-- --></span> <span class="token keyword">public</span><span class="token operator">:</span> 	<span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> 	<span class="token punctuation">{<!-- --></span> 		<span class="token keyword">this</span><span class="token operator">-&gt;</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span> <span class="token comment">//this指针指向被调用成员函数所属的对象</span> 		<span class="token comment">//age = age; 采用这种方式无法给类成员属性赋正确的值</span> 	<span class="token punctuation">}</span> 	<span class="token keyword">int</span> age<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>	 <span class="token punctuation">{<!-- --></span> 	Person <span class="token function">p1</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  	<span class="token comment">//当创建p1对象后，this指针就指向了p1对象，执行this-&gt;age = age;就能给成员变量赋正确的值</span>  	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> </code></pre> <ul> <li>在类的非静态成员函数中返回对象本身，可使用return *this</li> </ul> <p><strong>示例1</strong>：</p> <pre><code class="prism language-cpp"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{<!-- --></span> <span class="token keyword">public</span><span class="token operator">:</span> 	<span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> 	<span class="token punctuation">{<!-- --></span> 		<span class="token keyword">this</span><span class="token operator">-&gt;</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span> 		<span class="token comment">//age = age;</span> 	<span class="token punctuation">}</span>  	<span class="token keyword">void</span> <span class="token function">AddPerson</span><span class="token punctuation">(</span>Person <span class="token operator">&amp;</span>p<span class="token punctuation">)</span> 	<span class="token punctuation">{<!-- --></span> 		<span class="token keyword">this</span><span class="token operator">-&gt;</span>age <span class="token operator">+=</span> p<span class="token punctuation">.</span>age<span class="token punctuation">;</span> 	<span class="token punctuation">}</span>  	<span class="token keyword">int</span> age<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>	 <span class="token punctuation">{<!-- --></span> 	Person <span class="token function">p1</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 	Person <span class="token function">p2</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  	p2<span class="token punctuation">.</span><span class="token function">AddPerson</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//AddPerson返回的是void，所以p2.AddPerson(p1).AddPerson(p1)会报错，无法实现连续AddPerson</span>  	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> </code></pre> <p><strong>示例2</strong>：(解决示例1无法连续调用AddPerson的问题)</p> <pre><code class="prism language-cpp"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{<!-- --></span> <span class="token keyword">public</span><span class="token operator">:</span> 	<span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> 	<span class="token punctuation">{<!-- --></span> 		<span class="token keyword">this</span><span class="token operator">-&gt;</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span> 		<span class="token comment">//age = age;</span> 	<span class="token punctuation">}</span>  	Person<span class="token operator">&amp;</span> <span class="token function">AddPerson</span><span class="token punctuation">(</span>Person <span class="token operator">&amp;</span>p<span class="token punctuation">)</span> <span class="token comment">//注意这里返回值必须是引用，不然操作的对象就不是返回的对象了。值传递的方式会创建新的对象</span> 	<span class="token punctuation">{<!-- --></span> 		<span class="token keyword">this</span><span class="token operator">-&gt;</span>age <span class="token operator">+=</span> p<span class="token punctuation">.</span>age<span class="token punctuation">;</span> 		<span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token comment">//返回当前调用该函数的对象</span> 	<span class="token punctuation">}</span>  	<span class="token keyword">int</span> age<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>	 <span class="token punctuation">{<!-- --></span> 	Person <span class="token function">p1</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 	Person <span class="token function">p2</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  	p2<span class="token punctuation">.</span><span class="token function">AddPerson</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AddPerson</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果AddPerson的返回值是Person,那后面输出的值就是20，因为值传递会产生新的对象</span> 	cout <span class="token operator">&lt;&lt;</span> <span class="token string">"p2的年龄是"</span> <span class="token operator">&lt;&lt;</span> p2<span class="token punctuation">.</span>age <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">//输出的结果是30</span> 	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> </code></pre> <p>注意事项：由this指针衍生出的一个问题是<strong>空指针访问成员函数</strong>的问题<br /> 空指针是可以访问成员函数的，但是如果成员函数出现访问类属性的情况，就会出现报错。<br /><strong>示例</strong>：</p> <pre><code class="prism language-cpp"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{<!-- --></span> <span class="token keyword">public</span><span class="token operator">:</span> 	<span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> 	<span class="token punctuation">{<!-- --></span> 		<span class="token keyword">this</span><span class="token operator">-&gt;</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span> 		<span class="token comment">//age = age;</span> 	<span class="token punctuation">}</span>  	<span class="token keyword">void</span> <span class="token function">showClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 	<span class="token punctuation">{<!-- --></span> 		cout <span class="token operator">&lt;&lt;</span> <span class="token string">"this is Person class"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> 	<span class="token punctuation">}</span>  	<span class="token keyword">void</span> <span class="token function">showPersonAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 	<span class="token punctuation">{<!-- --></span> 		cout <span class="token operator">&lt;&lt;</span> <span class="token string">"age = "</span> <span class="token operator">&lt;&lt;</span> age <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">//相当于this-&gt;age</span> 	<span class="token punctuation">}</span> 	<span class="token keyword">int</span> age<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>	 <span class="token punctuation">{<!-- --></span> 	Person <span class="token operator">*</span> p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> 	p<span class="token operator">-&gt;</span><span class="token function">showClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//能够正常运行</span> 	p<span class="token operator">-&gt;</span><span class="token function">showPersonAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//出现报错，因此空指针无法访问成员变量</span>  	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> </code></pre> </p></div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-20625.htm">妙三多猫疫苗是几针（妙三多猫疫苗的不良反应）</a></p>
                                        <p>下一个：<a href="/news/article-21080.htm">猫咪3针疫苗多少钱一针啊（猫咪三针疫苗都是什么多少钱）</a></p>
                                    </div>
                                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/free-nodes/2024-11-13-free-node-subscribe-links.htm" title="「11月13日」最高速度21.5M/S，2024年Clash Verge Node每天更新免费节点订阅链接">「11月13日」最高速度21.5M/S，2024年Clash Verge Node每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-27089.htm" title="动物防疫站能打疫苗吗（动物防疫站可以驱虫吗）">动物防疫站能打疫苗吗（动物防疫站可以驱虫吗）</a></li>
                        <li class="py-2"><a href="/news/article-31246.htm" title="当我们更改小于当前序列号的AUTO_INCREMENT值时，MySQL将返回什么？">当我们更改小于当前序列号的AUTO_INCREMENT值时，MySQL将返回什么？</a></li>
                        <li class="py-2"><a href="/news/article-26171.htm" title="springboot整合log4j的踩坑实战记录_java">springboot整合log4j的踩坑实战记录_java</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-25-clash-verge-rev-node.htm" title="「1月25日」最高速度20.1M/S，2025年Clash Verge Node每天更新免费节点订阅链接">「1月25日」最高速度20.1M/S，2025年Clash Verge Node每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-12-free-node-subscribe-links.htm" title="「12月12日」最高速度19.2M/S，2024年Clash Verge Node每天更新免费节点订阅链接">「12月12日」最高速度19.2M/S，2024年Clash Verge Node每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-44976.htm" title="重庆宠物领养平台有哪些地方可以注册（重庆最大免费宠物领养平台）">重庆宠物领养平台有哪些地方可以注册（重庆最大免费宠物领养平台）</a></li>
                        <li class="py-2"><a href="/news/article-22457.htm" title="PHP如何访问全局类">PHP如何访问全局类</a></li>
                        <li class="py-2"><a href="/news/article-25690.htm" title="async-validator 源码学习笔记validate 方法">async-validator 源码学习笔记validate 方法</a></li>
                        <li class="py-2"><a href="/news/article-22913.htm" title="宠物领养平台有哪几个平台（宠物领养正规网站）">宠物领养平台有哪几个平台（宠物领养正规网站）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">6</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </div>
    </section>
    <!-- Features End -->
        <!-- Footer Start -->
    <section class="footer" style="background-image: url(/assets/website/img/clash_verge_node/hero-1-bg-img.png)">
        <div class="container">
            <div class="row">
                <div class="col-lg-12">
                    <div class="text-center">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                        <p class="text-white-50 f-15 mb-0">
                            <a href="/">Clash Verge Node免费机场节点分享官网</a> 版权所有 Powered by WordPress
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </section>
    <!-- Footer End -->
    <!-- javascript -->
    <script src="/assets/website/js/frontend/clash_verge_node/jquery-3.5.1.min.js"></script>
    <script src="/assets/website/js/frontend/clash_verge_node/bootstrap.bundle.min.js"></script>
    <script src="/assets/website/js/frontend/clash_verge_node/jquery.easing.min.js"></script>
    <!-- feather icons -->
    <script src="/assets/website/js/frontend/clash_verge_node/feather-icons.js"></script>
    <!-- carousel -->
    <script src="/assets/website/js/frontend/clash_verge_node/owl.carousel.min.js"></script>
    <!-- Main Js -->
    <script src="/assets/website/js/frontend/clash_verge_node/app.js"></script>

    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>