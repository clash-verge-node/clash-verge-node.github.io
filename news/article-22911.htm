<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://clash-verge-node.github.io/news/article-22911.htm" />
    <meta charset="utf-8">
    <title>小程序中实现token过期重新登录再重新请求业务接口</title>
        <meta name="description" content="小程序中实现token过期重新登录再重新请求业务接口 首先还是来看下小程序官方给出的小程序登录流程：  小程序官方登录地址 小程序官方登录流程图   我们这里所说的token就是指的官方说的自定义登录" />
        <link rel="icon" href="__ADDON__/img/clash_verge_node/favicon.ico" type="image/x-icon"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <!-- Pe-7 icon -->
    <link href="/assets/website/css/clash_verge_node/pe-icon-7.css" rel="stylesheet" type="text/css">
    <!--Slider-->
    <link rel="stylesheet" href="/assets/website/css/clash_verge_node/owl.carousel.min.css">
    <link rel="stylesheet" href="/assets/website/css/clash_verge_node/owl.theme.default.min.css">
    <!-- css -->
    <link href="/assets/website/css/clash_verge_node/bootstrap.min.css" rel="stylesheet" type="text/css">
    <link href="/assets/website/css/clash_verge_node/style.min.css" rel="stylesheet" type="text/css">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-1V24PEL91J"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-1V24PEL91J');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <!-- Loader -->
    <div id="preloader">
        <div id="status">
            <div class="spinner">
                <div class="bounce1"></div>
                <div class="bounce2"></div>
                <div class="bounce3"></div>
            </div>
        </div>
    </div>
    <!--Navbar Start-->
    <nav class="navbar navbar-expand-lg fixed-top navbar-custom sticky sticky-dark align-items-center">
        <div class="container">
                        <a class="logo mr-3" href="/">
                <span>Clash Verge Node</span>
            </a>
                        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarCollapse" aria-controls="navbarCollapse" aria-expanded="false" aria-label="Toggle navigation"><i class="" data-feather="menu"></i></button>
            <div class="collapse navbar-collapse" id="navbarCollapse">
                <ul class="navbar-nav navbar-center" id="mySidenav">
                                        <li class="nav-item"><a href="/" class="nav-link">首页</a></li>
                                        <li class="nav-item"><a href="/free-nodes/" class="nav-link">免费节点</a></li>
                                        <li class="nav-item"><a href="/paid-subscribe/" class="nav-link">推荐机场</a></li>
                                        <li class="nav-item"><a href="/news/" class="nav-link">新闻资讯</a></li>
                                        <li class="nav-item"><a href="#" class="nav-link">关于</a></li>
                    <li class="nav-item"><a href="#" class="nav-link">联系</a></li>
                </ul>
            </div>
        </div>
    </nav>
    <!-- Navbar End -->
    <!-- Hero Start -->
    <section class="hero-1-bg bg-light" style="background-image: url(/assets/website/img/clash_verge_node/hero-1-bg-img.png);padding: 0;" id="home">
        <div class="container">
            <div class="row align-items-center justify-content-center">
                <div class="col-lg-6">
                    <h1 class="hero-1-title font-weight-normal text-dark mb-4">小程序中实现token过期重新登录再重新请求业务接口</h1>
                    <p class="text-muted mb-4 pb-3">
                        <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / 正文
                    </p>
                </div>
                <div class="col-lg-6 col-md-10">
                    <div class="mt-lg-0"><img src="/assets/website/img/clash_verge_node/hero-img.png" alt="" class="img-fluid d-block mx-auto"></div>
                </div>
            </div>
        </div>
    </section>
    <!-- Hero End -->
    <!-- Features Start -->
    <section class="section" id="features">
        <div class="container">
            <div class="features-content">
                <div class="row">
                    <div class="col-md-9">
                                          				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> <h3> <a id="token_0" rel="nofollow"></a>小程序中实现token过期重新登录再重新请求业务接口</h3> <p>首先还是来看下小程序官方给出的小程序登录流程：</p> <ul> <li><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/login.html"  rel="nofollow">小程序官方登录地址</a></li> <li>小程序官方登录流程图</li> </ul> <p><img decoding="async" src="http://img.555519.xyz/uploads/20230201/d7077a6e37cd4b877c9433aea0bc7c6f.jpg" alt="小程序中实现token过期重新登录再重新请求业务接口"></p> <p>我们这里所说的token就是指的官方说的<code>自定义登录态</code>，token一般都是有时效性，按照此流程，当token失效的时候，页面在请求接口的时候服务端肯定会认为token是非法的，此时就需要小程序端重新获取新的token，然后继续接着后面的流程走。一般服务端都会给一个特定的状态码标记需要重新获取token，后面的场景我们都以服务端返回code码401认为需要去登录。</p> <h4> <a id="1token_13" rel="nofollow"></a>场景1：token失效之后直接跳转到特定的一个授权登录页面</h4> <p>由于getUserInfo接口变动的缘故，必须用户手动去触发一个按钮，一般都会做一个特定的授权登录页面或者弹窗，那此时在接口返回401的时候那我们直接就跳转到那个授权页面或者弹起授权登录弹窗即可，相当于是走了用户第一次进入该小程序的流程。</p> <blockquote> <p>这种方案是最简单的解决方案，但是缺点也很明显：打断了用户的操作流程，重复了第一次授权登录的流程，很繁琐。</p> </blockquote> <h4> <a id="2tokentoken_19" rel="nofollow"></a>场景2：token失效之后无感知获取新token并继续之前的操作</h4> <p>分2步来解决这个问题，无感知获取token</p> <p>这个其实很简单，调wx.login()获取code之后再调服务端新的接口，此接口只需要接受code返回当前登录账户最新的信息（token以及其他），拿到最新token。</p> <p>具体代码实现如下：</p> <p>http.js文件核心代码</p> <pre><code class="prism language-js"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Http</span> <span class="token punctuation">{<!-- --></span>   <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span>    <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span> url<span class="token punctuation">,</span> data <span class="token operator">=</span> <span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span><span class="token punctuation">,</span> method<span class="token punctuation">,</span> header<span class="token punctuation">,</span> callback <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>     <span class="token keyword">let</span> _this <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{<!-- --></span>       wx<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span>         url<span class="token punctuation">,</span>         data<span class="token punctuation">,</span>         method<span class="token punctuation">,</span>         header<span class="token punctuation">:</span> <span class="token punctuation">{<!-- --></span> Authorization<span class="token punctuation">:</span> <span class="token string">'Bearer '</span> <span class="token operator">+</span> storge<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token constant">LOGIN_TOKEN</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>         callback<span class="token punctuation">,</span>         <span class="token function">fail</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>           <span class="token function">reject</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>         <span class="token punctuation">}</span><span class="token punctuation">,</span>         complete<span class="token punctuation">:</span> res <span class="token operator">=&gt;</span> <span class="token punctuation">{<!-- --></span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">let</span> statusCode <span class="token operator">=</span> res<span class="token punctuation">.</span>statusCode<span class="token punctuation">;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>statusCode <span class="token operator">==</span> <span class="token number">404</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>             console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'接口不存在'</span><span class="token punctuation">)</span>           <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>statusCode <span class="token operator">==</span> <span class="token number">401</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>            <span class="token function">getNewToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{<!-- --></span>               _this<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span> url<span class="token punctuation">,</span> data<span class="token punctuation">,</span> method<span class="token punctuation">,</span> callback<span class="token punctuation">:</span> resolve <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>           <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>statusCode <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>             <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span>           <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>statusCode<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">'5'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>             wx<span class="token punctuation">.</span><span class="token function">showModal</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span> content<span class="token punctuation">:</span> <span class="token string">'服务器报错，请重试！'</span><span class="token punctuation">,</span> showCancel<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>          <span class="token punctuation">}</span>       <span class="token punctuation">}</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span>  <span class="token comment">// 获取token</span> <span class="token keyword">const</span> <span class="token function-variable function">getNewToken</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{<!-- --></span>   <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{<!-- --></span>     wx<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span>       <span class="token function">success</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         wx<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span>           url<span class="token punctuation">:</span> <span class="token string">'获取最新token接口地址'</span><span class="token punctuation">,</span>           method<span class="token punctuation">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>           <span class="token function">success</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>             <span class="token keyword">let</span> r <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">;</span>             <span class="token comment">// 将所有存储到观察者数组中的请求重新执行。</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token punctuation">.</span>code <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>               <span class="token keyword">const</span> token <span class="token operator">=</span> r<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'token'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>               wx<span class="token punctuation">.</span><span class="token function">setStorageSyn</span><span class="token punctuation">(</span><span class="token string">'LOGIN_TOKEN'</span><span class="token punctuation">,</span> token<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>           <span class="token punctuation">}</span>         <span class="token punctuation">}</span><span class="token punctuation">)</span>       <span class="token punctuation">}</span><span class="token punctuation">,</span>       <span class="token function">fail</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token function">reject</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'wx login fail'</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">}</span> </code></pre> <p>接下来看下如何使用：</p> <p>api/index.js文件部分api</p> <pre><code class="prism language-js"><span class="token keyword">import</span> <span class="token punctuation">{<!-- --></span> Http <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../utils/http.js'</span><span class="token punctuation">;</span> <span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Index</span> <span class="token keyword">extends</span> <span class="token class-name">Http</span> <span class="token punctuation">{<!-- --></span>   <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>     <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>      <span class="token comment">// 获取商品分类</span>   <span class="token function">goodsList</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>     <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span>       url<span class="token punctuation">:</span> <span class="token string">'goodsList'</span><span class="token punctuation">,</span>       method<span class="token punctuation">:</span> <span class="token string">'GET'</span><span class="token punctuation">,</span>       data<span class="token punctuation">:</span> data     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> <p>pages/index/index.js文件中调用该接口，部分代码：</p> <pre><code class="prism language-js"><span class="token keyword">import</span> <span class="token punctuation">{<!-- --></span> Index <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../../api/index.js'</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token constant">API</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span>    <span class="token comment">/**    * 页面的初始数据    */</span>   data<span class="token punctuation">:</span> <span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token comment">// 获取商品列表</span>   <span class="token function">getGoodList</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>     <span class="token keyword">let</span> param <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>params<span class="token punctuation">;</span>     <span class="token keyword">let</span> params <span class="token operator">=</span> <span class="token punctuation">{<!-- --></span> page<span class="token punctuation">:</span> page<span class="token punctuation">,</span> <span class="token operator">...</span>param <span class="token punctuation">}</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>resolve <span class="token operator">=&gt;</span> <span class="token punctuation">{<!-- --></span>       <span class="token constant">API</span><span class="token punctuation">.</span><span class="token function">getGoodList</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=&gt;</span> <span class="token punctuation">{<!-- --></span>         <span class="token comment">// 业务逻辑</span>       <span class="token punctuation">}</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span>   <span class="token punctuation">}</span>      <span class="token operator">...</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span> </code></pre> <p>如此，我们来试验一番，看到底可以不</p> <p><img decoding="async" src="http://img.555519.xyz/uploads/20230201/52f0a255e1074b28e0fb82cfa66fd496.jpg" alt="小程序中实现token过期重新登录再重新请求业务接口"></p> <p>如图，看到在调user接口的时候发现token失效（服务端返回了401），会调issue获取最新的token,然后继续走user接口，整个过程用户无感知，而且也不会中断之前的操作，是不是很完美，答案是NO! 往下看</p> <p><img decoding="async" src="http://img.555519.xyz/uploads/20230201/3cda19c73471f785e8039534fb8137ae.jpg" alt="小程序中实现token过期重新登录再重新请求业务接口"></p> <p>遇到业务复杂的页面，会有多个请求，此时，获取最新token的这个接口就会多次调用，这个接口其实只需要调一次就可以了，这样就影响性能了，那如何对这种进行优化呢？其实方法有很多种，最简单的就是利用发布订阅模式，简单修改代码如下：</p> <pre><code class="prism language-js"><span class="token keyword">let</span> isRefreshing <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token keyword">let</span> subscribers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">onAccessTokenFetched</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>   subscribers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{<!-- --></span>     <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span>   subscribers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token keyword">function</span> <span class="token function">addSubscriber</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>   subscribers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token punctuation">}</span>  <span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Http</span> <span class="token punctuation">{<!-- --></span>   <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span>    <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span> url<span class="token punctuation">,</span> data <span class="token operator">=</span> <span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span><span class="token punctuation">,</span> method<span class="token punctuation">,</span> header<span class="token punctuation">,</span> callback <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>     <span class="token keyword">let</span> _this <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{<!-- --></span>       wx<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span>         url<span class="token punctuation">,</span>         data<span class="token punctuation">,</span>         method<span class="token punctuation">,</span>         header<span class="token punctuation">:</span> <span class="token punctuation">{<!-- --></span> Authorization<span class="token punctuation">:</span> <span class="token string">'Bearer '</span> <span class="token operator">+</span> storge<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token constant">LOGIN_TOKEN</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>         callback<span class="token punctuation">,</span>         <span class="token function">fail</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>           <span class="token function">reject</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>         <span class="token punctuation">}</span><span class="token punctuation">,</span>         complete<span class="token punctuation">:</span> res <span class="token operator">=&gt;</span> <span class="token punctuation">{<!-- --></span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">let</span> statusCode <span class="token operator">=</span> res<span class="token punctuation">.</span>statusCode<span class="token punctuation">;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>statusCode <span class="token operator">==</span> <span class="token number">404</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>             console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'接口不存在'</span><span class="token punctuation">)</span>           <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>statusCode <span class="token operator">==</span> <span class="token number">401</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>                          <span class="token comment">// 将需要重新执行的接口缓存到一个队列中</span>            <span class="token function">addSubscriber</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{<!-- --></span>              _this<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span> url<span class="token punctuation">,</span> data<span class="token punctuation">,</span> method<span class="token punctuation">,</span> header<span class="token punctuation">,</span> callback<span class="token punctuation">:</span> resolve <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>                         <span class="token keyword">if</span> <span class="token punctuation">(</span>isRefreshing<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>               <span class="token function">getNewToken</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{<!-- --></span>                 <span class="token comment">// 依次去执行缓存的接口</span>                 <span class="token function">onAccessTokenFetched</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 isRefreshing <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span><span class="token punctuation">)</span>             <span class="token punctuation">}</span>             isRefreshing <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>statusCode <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>             <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span>           <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>statusCode<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">'5'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>             wx<span class="token punctuation">.</span><span class="token function">showModal</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span> content<span class="token punctuation">:</span> <span class="token string">'服务器报错，请重试！'</span><span class="token punctuation">,</span> showCancel<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>          <span class="token punctuation">}</span>       <span class="token punctuation">}</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span>  <span class="token comment">// 获取token</span> <span class="token keyword">const</span> <span class="token function-variable function">getNewToken</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{<!-- --></span>   <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{<!-- --></span>     wx<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span>       <span class="token function">success</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         wx<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span>           url<span class="token punctuation">:</span> <span class="token string">'获取最新token接口地址'</span><span class="token punctuation">,</span>           method<span class="token punctuation">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>           <span class="token function">success</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>             <span class="token keyword">let</span> r <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">;</span>             <span class="token comment">// 将所有存储到观察者数组中的请求重新执行。</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token punctuation">.</span>code <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>               <span class="token keyword">const</span> token <span class="token operator">=</span> r<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'token'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>               wx<span class="token punctuation">.</span><span class="token function">setStorageSyn</span><span class="token punctuation">(</span><span class="token string">'LOGIN_TOKEN'</span><span class="token punctuation">,</span> token<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>           <span class="token punctuation">}</span>         <span class="token punctuation">}</span><span class="token punctuation">)</span>       <span class="token punctuation">}</span><span class="token punctuation">,</span>       <span class="token function">fail</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token function">reject</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'wx login fail'</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">}</span> </code></pre> <p>对，就是这么简答，把所有401的接口执行缓存到一个队列中，拿到最新token（这里使用了请求锁，只执行一次获取token的接口），接着再依次去走之前的逻辑，整个过程无感知，而且页面不管有多少个请求，始终只会调一次获取token的接口。下面来简单测试下：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads/20230201/e0a214ea206216d919c7d196bcaa8950.jpg" alt="小程序中实现token过期重新登录再重新请求业务接口"></p> <p>看到，issue接口只调取了一次，如此就可以完美的解决小程序中token过期重新无感知登录并重新请求之前所有的接口。</p> </p></div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-22458.htm">windows 使用pyenv-win 管理多python 版本</a></p>
                                        <p>下一个：<a href="/news/article-22913.htm">宠物领养平台有哪几个平台（宠物领养正规网站）</a></p>
                                    </div>
                                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/free-nodes/2024-10-16-node-share-links.htm" title="「10月16日」最高速度22.1M/S，2024年Clash Verge Node每天更新免费节点订阅链接">「10月16日」最高速度22.1M/S，2024年Clash Verge Node每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-21080.htm" title="猫咪3针疫苗多少钱一针啊（猫咪三针疫苗都是什么多少钱）">猫咪3针疫苗多少钱一针啊（猫咪三针疫苗都是什么多少钱）</a></li>
                        <li class="py-2"><a href="/news/article-19248.htm" title="python多线程编程_2小时玩转python多线程编程">python多线程编程_2小时玩转python多线程编程</a></li>
                        <li class="py-2"><a href="/news/article-22911.htm" title="小程序中实现token过期重新登录再重新请求业务接口">小程序中实现token过期重新登录再重新请求业务接口</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-10-30-node-share.htm" title="「10月30日」最高速度18.5M/S，2024年Clash Verge Node每天更新免费节点订阅链接">「10月30日」最高速度18.5M/S，2024年Clash Verge Node每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-20-free-node-subscribe-links.htm" title="「11月20日」最高速度21.2M/S，2024年Clash Verge Node每天更新免费节点订阅链接">「11月20日」最高速度21.2M/S，2024年Clash Verge Node每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-10-23-clash-verge-rev-github.htm" title="「10月23日」最高速度22.8M/S，2024年Clash Verge Node每天更新免费节点订阅链接">「10月23日」最高速度22.8M/S，2024年Clash Verge Node每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-9-14-free-clash-verge-rev-node.htm" title="「9月14日」最高速度22.1M/S，2024年Clash Verge Node每天更新免费节点订阅链接">「9月14日」最高速度22.1M/S，2024年Clash Verge Node每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-18-free-node-subscribe-links.htm" title="「11月18日」最高速度21.6M/S，2024年Clash Verge Node每天更新免费节点订阅链接">「11月18日」最高速度21.6M/S，2024年Clash Verge Node每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-9-20-today-clash-verge-rev-node.htm" title="「9月20日」最高速度21.4M/S，2024年Clash Verge Node每天更新免费节点订阅链接">「9月20日」最高速度21.4M/S，2024年Clash Verge Node每天更新免费节点订阅链接</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">27</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">34</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">31</span> <a href="/date/2024-10/" title="2024-10 归档">2024-10</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">19</span> <a href="/date/2024-09/" title="2024-09 归档">2024-09</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </div>
    </section>
    <!-- Features End -->
        <!-- Footer Start -->
    <section class="footer" style="background-image: url(/assets/website/img/clash_verge_node/hero-1-bg-img.png)">
        <div class="container">
            <div class="row">
                <div class="col-lg-12">
                    <div class="text-center">
                        <p class="text-white-50 f-15 mb-0">
                            <a href="/">Clash Verge Node免费机场节点分享官网</a> 版权所有 Powered by WordPress
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </section>
    <!-- Footer End -->
    <!-- javascript -->
    <script src="/assets/website/js/frontend/clash_verge_node/jquery-3.5.1.min.js"></script>
    <script src="/assets/website/js/frontend/clash_verge_node/bootstrap.bundle.min.js"></script>
    <script src="/assets/website/js/frontend/clash_verge_node/jquery.easing.min.js"></script>
    <!-- feather icons -->
    <script src="/assets/website/js/frontend/clash_verge_node/feather-icons.js"></script>
    <!-- carousel -->
    <script src="/assets/website/js/frontend/clash_verge_node/owl.carousel.min.js"></script>
    <!-- Main Js -->
    <script src="/assets/website/js/frontend/clash_verge_node/app.js"></script>

    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>